import osimport subprocessimport sysfrom Bio import SearchIO, SeqIOimport timeimport threadingfrom utilities import check_dependencies,spinning_cursor_taskerror2=""" __ __  __  __  __  |_ |__)|__)/  \|__) |__| \ | \ \__/| \                                       """def check_args(args):    if args.contigs is None:        error = "\nError: Path to contigs not specified\n"        error += "Please provied it with a --contigs path\n"        print(error2)        print(error)        sys.exit(1)    if args.plastic is None:        error = "\nError: No plastic type specified\n"        error += "Use the flag --plastic to specify a plastic type.\n"        print(error2)        print(error)        sys.exit(1)            if args.output is None:        error = "\nError: No output folder provided\n"        error += "Use the flag --output to provide it.\n"        print(error2)        print(error)        sys.exit(1)#Checking for local folders:def fetch_motifs():    global motif_dir, bitscores_file    motif_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "motifs")    if not os.path.exists(motif_dir):        error = f"\nError: No motif directory at {motif_dir} found\n"        print(error2)        sys.exit(error)    bitscores_file = os.path.join(motif_dir, 'bitscores.txt')    if not os.path.exists(bitscores_file):        error = f"\nError: No bitscores.txt file found in {motif_dir}\n"        print(error2)        sys.exit(error)     def translate_search(args):    check_dependencies(["hmmsearch","prodigal"])    check_args(args)    fetch_motifs()        if isinstance(args.plastic, str) and args.plastic.lower() != "all":        plastic_names = args.plastic.split(',')    elif isinstance(args.plastic, str) and args.plastic.lower() == "all":        plastic_names= [os.path.splitext(file)[0] for file in os.listdir(motif_dir) if file.endswith('.hmm')]                  if args.plastic.lower() == "all":        # Create a sub-directory for each plastic type        for plastic_name in plastic_names:            temp_dir = os.path.join(os.path.abspath(args.output), "temps", plastic_name.lower())            if os.path.exists(temp_dir):                print(error2)                raise ValueError("ERROR: Temps folder already exists, please remove it and run the program again.")            else:                os.makedirs(temp_dir, exist_ok=True)    else:        temp_dir = os.path.join(os.path.abspath(args.output), "temps")        if os.path.exists(temp_dir):            print(error2)            raise ValueError("ERROR: Temps folder already exists, please remove it and run the program again.")        else:            os.makedirs(temp_dir, exist_ok=True)        contigs_base = os.path.basename(args.contigs).split(".")[0]    aa_file = os.path.join(args.output, "temps", f"{contigs_base}.faa")    nt_file = os.path.join(args.output, "temps", f"{contigs_base}.ffn")    prodigal_command = f"prodigal -i {args.contigs} -a {aa_file} -p meta -d {nt_file}"        prodigal_log_file = os.path.join(args.output, "temps", "prodigal.log")        task_done = threading.Event()    with open(prodigal_log_file, 'w') as f:        process = subprocess.Popen(prodigal_command, shell=True, stdout=f, stderr=f)    t = threading.Thread(target=spinning_cursor_task, args=(task_done,'prodigal'))    t.start()        while process.poll() is None:        time.sleep(0.1)    task_done.set()    t.join()        print("\nprodigal finished running. Prodigal logs saved to {}".format(prodigal_log_file))#Search for hmm-hits:    for plastic_name in plastic_names:        plastic_name = plastic_name.lower()        temp_dir = os.path.join(os.path.abspath(args.output), "temps", plastic_name.lower())        incT = None        with open(bitscores_file) as f:            for line in f:                if plastic_name in line.lower():                    incT = float(line.split(":")[1].strip())                    break        if incT is None:            print(error2)            sys.exit(f"\n ERROR: No bitscore found for specified plastic type: {plastic_name} in {plastic_names}\n")              hmm_input = os.path.join(motif_dir, f"{plastic_name}.hmm")        hmm_output = os.path.join(temp_dir, f"{contigs_base}_{plastic_name}_HMMER.out")        hmmer_command = f"hmmsearch --tformat fasta -T {incT} --tblout {hmm_output} {hmm_input} {aa_file}"        log_file = os.path.join(temp_dir, f"{plastic_name}_hmmsearch.log")                # specify the file to capture program output        program_output_file = os.path.join(temp_dir, f"{contigs_base}_{plastic_name}_hmmsearch.out")                task_done = threading.Event()                with open(log_file, 'w') as f, open(program_output_file, 'w') as p_out:            process = subprocess.Popen(hmmer_command, shell=True, stdout=p_out, stderr=f)                t = threading.Thread(target=spinning_cursor_task, args=(task_done,'hmmsearch'))        t.start()                while process.poll() is None:            time.sleep(0.1)        task_done.set()        t.join()        print("\nhmmsearch finished running. Results saved to {}".format(hmm_output))        print("hmmsearch logs saved to {}".format(log_file))        print("hmmsearch program output saved to {}".format(program_output_file))                qresults = SearchIO.read(hmm_output, "hmmer3-tab")        hits = [result.id for result in qresults]                records = list(SeqIO.parse(aa_file, "fasta"))        output = os.path.join(temp_dir, f"{contigs_base}_{plastic_name}_hmm_output.fasta")                if os.path.exists(output):            os.remove(output)                for record in records:            if record.id in hits and len(record) > 10:                with open(output, "a") as f:                    f.write(">" + str(record.id) + "\n" + str(record.seq) + "\n")